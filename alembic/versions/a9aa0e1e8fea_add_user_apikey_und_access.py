"""add user, apikey und access

Revision ID: a9aa0e1e8fea
Revises: 8c611fcc5826
Create Date: 2017-06-16 20:14:17.600115

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.exc import OperationalError


# revision identifiers, used by Alembic.
revision = 'a9aa0e1e8fea'
down_revision = '8c611fcc5826'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    try:
        op.create_table('nodeAccess',
        sa.Column('data', sa.Text(), nullable=True),
        sa.Column('id', sa.Text(), nullable=False),
        sa.PrimaryKeyConstraint('id')
        )
    except OperationalError as e:
        print(e)

    try:
        op.create_table('users',
        sa.Column('login', sa.Text(), nullable=True),
        sa.Column('hash', sa.Text(), nullable=True),
        sa.Column('id', sa.Text(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('login')
        )
    except OperationalError as e:
        print(e)

    try:
        op.create_table('apiKeys',
        sa.Column('key', sa.Text(), nullable=True),
        sa.Column('user_id', sa.Text(), nullable=True),
        sa.Column('id', sa.Text(), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
    except OperationalError as e:
        print(e)

    try:
        op.create_table('user2access',
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('access_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['access_id'], ['nodeAccess.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], )
        )
    except OperationalError as e:
        print(e)

    try:
        op.create_table('apikey2access',
        sa.Column('apikey_id', sa.Integer(), nullable=True),
        sa.Column('access_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['access_id'], ['nodeAccess.id'], ),
        sa.ForeignKeyConstraint(['apikey_id'], ['apiKeys.id'], )
        )
    except OperationalError as e:
        print(e)

    try:
        op.create_foreign_key(None, 'openwrt', 'Revisions', ['synd_diff_rev_id'], ['id'])
    except OperationalError as e:
        print(e)
    except NotImplementedError as e:
        print(e)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'openwrt', type_='foreignkey')
    op.drop_table('apikey2access')
    op.drop_table('user2access')
    op.drop_table('apiKeys')
    op.drop_table('users')
    op.drop_table('nodeAccess')
    # ### end Alembic commands ###
